bl_info = {
    "name": "Pixy",
    "author": "Caleb Burnett",
    "version": (1, 0, 0),
    "blender": (2, 80, 0),
    "location": "Render Engine",
    "description": "Render engine that produces a pixelated effect.",
    "category": "Render",
}

import bpy
from math import ceil


# Custom Render Engine
class PixelatedRenderEngine(bpy.types.RenderEngine):
    bl_idname = "pixy"
    bl_label = "Pixy"
    bl_use_preview = False

    def __init__(self):
        super().__init__()
        self.pixelation_factor = 8

    def update(self, data, scene):
        self.pixelation_factor = scene.pixelation_factor

    def render(self, scene):
        width = scene.render.resolution_x
        height = scene.render.resolution_y
        aspect_ratio = width / height
        pixels_x = ceil(width / self.pixelation_factor)
        pixels_y = ceil(height / self.pixelation_factor)

        self.begin_result(0, 0, width, height)
        self.begin_result_pass(0, 0, width, height)

        pixel_size_x = width / pixels_x
        pixel_size_y = height / pixels_y

        for j in range(pixels_y):
            for i in range(pixels_x):
                x = i * pixel_size_x
                y = j * pixel_size_y
                color = self.get_pixel_color(scene, x, y, pixel_size_x, pixel_size_y)
                self.set_pixel((i * self.pixelation_factor), (j * self.pixelation_factor), color)

        self.end_result_pass()
        self.end_result()

    def get_pixel_color(self, scene, x, y, size_x, size_y):
        # Perform custom pixel color calculation here
        # For demonstration purposes, we'll use a simple average color
        pixel_color = [0.0, 0.0, 0.0]

        for j in range(int(size_y)):
            for i in range(int(size_x)):
                r, g, b, _ = scene.view_layers[0].samples[x + i, y + j]
                pixel_color[0] += r
                pixel_color[1] += g
                pixel_color[2] += b

        num_pixels = size_x * size_y
        pixel_color = [c / num_pixels for c in pixel_color]

        return pixel_color


# Panel in Render Properties
class PixelatedRenderPanel(bpy.types.Panel):
    bl_label = "Pixelation"
    bl_idname = "RENDER_PT_pixelation"
    bl_space_type = 'PROPERTIES'
    bl_region_type = 'WINDOW'
    bl_context = "render"

    def draw(self, context):
        layout = self.layout
        scene = context.scene

        layout.prop(scene, "pixelation_factor", text="Pixelation Factor")


# Register Classes
def register():
    bpy.utils.register_class(PixelatedRenderEngine)
    bpy.utils.register_class(PixelatedRenderPanel)
    bpy.types.Scene.pixelation_factor = bpy.props.IntProperty(
        name="Pixelation Factor",
        default=8,
        min=1,
        max=32
    )


# Unregister Classes
def unregister():
    del bpy.types.Scene.pixelation_factor
    bpy.utils.unregister_class(PixelatedRenderPanel)
    bpy.utils.unregister_class(PixelatedRenderEngine)


# Register Add-on
if __name__ == "__main__":
    register()
